{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "7bb3934b-e662-41cd-a769-5bc6ae1e0361",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Halo Takumi\n",
      "Halo Takumi\n"
     ]
    }
   ],
   "source": [
    "#Tipe string\n",
    "print('Halo Takumi') #membuat string dengan tanda petik tunggal\n",
    "print('Halo Takumi') #membuat string dengan tanda petik tunggal\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "2d1e8ce2-5492-434a-a12e-dae97493184d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Halo\n",
      "Takumi\n",
      "Halo Takumi\n"
     ]
    }
   ],
   "source": [
    "#variabel type string\n",
    "s1 = 'Halo' #variabel string 1\n",
    "s2 = 'Takumi' #variabel string 2\n",
    "\n",
    "#menampilkan type string\n",
    "print(s1)\n",
    "print(s2)\n",
    "print (s1+' '+s2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "b6b54a00-7588-4db4-8dbf-384db9ce8b78",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "False\n",
      "False\n",
      "True\n",
      "True\n",
      "True\n"
     ]
    }
   ],
   "source": [
    "#Membandingkan string\n",
    "s1 = 'Halo' #variabel string 1\n",
    "s2 = 'Takumi' #variabel string 2\n",
    "print(s1 > s2)\n",
    "print(s1 >= s2)\n",
    "print(s1 < s2)\n",
    "print(s1 <= s2)\n",
    "print(s1 != s2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "972e76a5-7dfa-440b-a407-9c4375945fbc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "T\n",
      "k\n",
      "Ta\n",
      "Taku\n",
      "umi\n",
      "mi\n",
      "Tak\n",
      "Takumi oke\n",
      "TakumiTakumi\n"
     ]
    }
   ],
   "source": [
    "#Mengambil Substring; menggunakan tanda bracket []\n",
    "s = 'Takumi'\n",
    "print(s[0]) #menampilkan sub string karakter pertama\n",
    "print(s[-4]) #menampilkan sub string karakter he 4 dari kanan\n",
    "print(s[:2]) #menampilkan dua karakter di awal\n",
    "print(s[:-2])#menghilangkan dua karakter terakir\n",
    "print(s[3:]) #menampilkan tiga karakter terakhir\n",
    "print(s[-2:])#menampilkan dua karakter terakhir\n",
    "print(s[0:3])#menampilkan karakter dari 0\n",
    "len (s)#Menunjukkan jumlah karakter\n",
    "print(s+' '+ 'oke') #penggabungan\n",
    "print(s*2) #Pengulangan"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "d1b9face-045b-4e88-9012-294b39a89586",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#menemukan offset subtring\n",
    "s = 'Takumi'\n",
    "s.find('aku')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "37fccb19-e69e-496a-9dc3-27a05909a93e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'TAKUmi'"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#mengganti kemunculan suatu substring dengan substring lainnya\n",
    "s = 'Takumi'\n",
    "s.replace('aku', 'AKU')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "54cf2974-ec21-4961-b732-0483ce65dfe1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'TAKUMI'"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#mengkonversi huruf besar dan kecil\n",
    "s = 'Takumi'\n",
    "s.upper()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c9e4c8fe-c58d-492c-9f7f-603c927642ee",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
